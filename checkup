#!/usr/bin/php
<?php

include ('rhio.php');

$checkup = [
    // Strategy
    '/teamplay/enable' => 'true',
    '/decision/cooperation' => 'true',
    '/decision/enableShare' => 'true',
    '/moves/robocup/headMove' => 'Head2',
    '/moves/playing/approachMove' => 'approach_potential',
    '/moves/playing/useKickController' => 'true',
    '/moves/approach_potential/enableLateral' => 'true',
    '/teamplay/aggressivity' => 0.75,

    // Behavior
    '/moves/robocup/delayStart' => '0',
    '/moves/placer/directMode' => 'true',
    '/moves/playing/localizeWalkDuration' => 10,
    '/moves/search/rotateAfter' => 2.5,

    // Pressure
    '/decision/lowPressureThreshold' => 60000,
    '/pressure/normalWeight' => 150000,

    // Locomotion
    '/moves/walk/smoothTransition' => 0.5,
    '/moves/walk/warmup' => 1,
    '/moves/walk/maxDStepByCycle' => 10,
    '/moves/walk/maxDLatByCycle' => 5,
    '/moves/walk/maxDTurnByCycle' => 2.5,
    '/moves/walk/shootPhase' => 0,
    '/moves/walk/shootAfterPhase' => 0.25,
    '/moves/approach_potential/stepP' => 1,
    '/moves/Head2/forceTrackDist' => 0.75,
    '/moves/Head2/trackingPeriod' => 1.5,

    // Filters and Localisation
    '/Localisation/period' => 3,
    '/Localisation/Field/nbParticles' => 3000,	
    '/Localisation/Field/RobotController/angleExploration' => 1,
    '/Localisation/Field/RobotController/posExploration' => 5,
    '/Localisation/Field/FieldPF/fallNoiseTheta' => 20,
    '/Localisation/Field/FieldPF/fallNoise' => 25,
    '/Localisation/Field/GoalObservation/maxAngleError' => 10,
    '/Localisation/Field/GoalObservation/maxTiltAllowed' => 80,
    '/Localisation/Field/maxNoiseBoost' => 10,
    '/Localisation/Consistency/enabled' => 'false',
    '/ballStack/farBall' => 4,
    '/ballStack/scoreReduction' => 0.04,

    // Head tilts
    '/moves/head/minTilt' => 10,
    '/moves/head/maxTilt' => 70,
    '/moves/head/scanTiltNbPos' => 3,
    '/moves/head/scanPanNbPos' => 8,
    '/moves/Head2/maxSpeed' => 180,

    // I hope we won't need that
    '/moves/penalty/startX' => 200,
];

$checkup_sigmaban = [
    '/moves/walk/maxStep' => 47,
    '/moves/walk/startPhase' => 0,
    '/moves/standup/speed' => 1.25,
];

$checkup_sigmaban2 = [
    '/moves/walk/maxStep' => 60,
    '/moves/walk/startPhase' => 0.1,
];

$robots = [
    'chewbacca' => 'sigmaban',
    'mowgly' => 'sigmaban',
    'django' => 'sigmaban',
    'tom' => 'sigmaban2',
    'olive' => 'sigmaban'
];

function question($msg) {
    while (true) {
        echo "\n\e[1m$msg\e[m (y/n)\n";
        echo "> ";
        flush();
        $m = trim(readline());
        if ($m == 'y') return true;
        if ($m == 'n') return false;
        echo "You should answer 'y' or 'n'\n";
    }
}

if (count($argv) >= 2) {
    $robot = $argv[1];
} else {
    die('Usage: ./checkup [robot]'."\n");
}

if (isset($robots[$robot])) {
    $vname = 'checkup_'.$robots[$robot];
    if (isset($$vname)) {
        $checkup = array_merge($checkup, $$vname);
    }
}

function error($msg)
{
    echo "\e[31;1m$msg\n";
}

function warning($msg)
{
    echo "\e[33;1m$msg\n";
}

function success($msg)
{
    echo "\e[32;1m$msg\n";
}

$rhio = new RhIO('env/'.$robot.'/rhio/');

echo "\n\e[1mChecking up RhIO values [$robot]\n";
$changes = false;

foreach ($checkup as $node => $value) {
    $value = (string)$value;
    if ($value === 'true') $value = '1';
    if ($value === 'false') $value = '0';

    $v = $rhio->readValue($node);
    if ($v !== null) {
        if ($v == $value) {
            success("* $node=$value");
        } else {
            error("* $node=$v, should be $value");
            if (question('Fix it?')) {
                $rhio->setValue($node, $value);
                $changes = true;
                success("-> Fixing it (don't forget to git)");
            }
        }
    } else {
        error("Can't find value $node");
    }
}

echo "\e[m\n";
