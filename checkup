#!/usr/bin/php
<?php

$checkup = [
    '/referee/teamId' => 16,
    '/moves/robocup/delayStart' => 0,
    '/moves/placer/directMode' => 'true',
    '/decision/lowPressureThreshold' => 60000,
    '/pressure/normalWeight' => 150000,
    '/moves/walk/warmup' => 0.6,
    '/moves/walk/shootAfterPhase' => 0,
    '/moves/walk/shootSpeed' => 4,
    '/moves/approach_potential/stepP' => 1,
    '/moves/approach_potential/distanceThreshold' => 0.065,
    '/moves/approach_potential/targetX' => 0.1,
    '/moves/approach_potential/targetY' => 0.08,
    // XXX: Head and Head2
];

function question($msg) {
    while (true) {
        echo "\n\e[1m$msg\e[m (y/n)\n";
        echo "> ";
        flush();
        $m = trim(readline());
        if ($m == 'y') return true;
        if ($m == 'n') return false;
        echo "You should answer 'y' or 'n'\n";
    }
}

$host = '10.0.0.1';
if (count($argv) >= 2) {
    $host = 'localhost';
}

function error($msg)
{
    echo "\e[31;1m$msg\n";
}

function warning($msg)
{
    echo "\e[33;1m$msg\n";
}

function success($msg)
{
    echo "\e[32;1m$msg\n";
}

function cmd($cmd) {
    global $host;
    $result = trim(`rhio $host $cmd`);
    return $result;
}

echo "\n\e[1mChecking up RhIO values [$host]\n";
$changes = false;

foreach ($checkup as $node => $value) {
    $return = cmd($node);
    $parts = explode('=', $return, 2);
    if (count($parts) == 2) {
        $v = $parts[1];
        if ($v == $value) {
            success("* $node=$value");
        } else {
            error("* $node=$v, should be $value");
            if (question('Fix it?')) {
                cmd("$node=$value");
                $changes = true;
                success("-> Fixing it");
            }
        }
    } else {
        error("Can't find value $node");
    }
}

if ($changes) {
    cmd('save');
    success('-> Saving changes');
}

echo "\e[m\n";
